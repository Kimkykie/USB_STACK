Debug info from  (Module - main)


{{DEVELOPMENT}} --------(((DEBUGINFO)))--------{{DEVELOPMENT}} 

 DRIVER SYMBOLS (alphabet order)
-------------------------------
Abstract=Common\MainAbstract.inc
Doc_Misra_Rule_1=1.1
Doc_Misra_Rule_10=8.10
Doc_Misra_Rule_10_Description=All declarations and definitions of objects or function at file scope shall have internal linkage unless external linkage is required.
Doc_Misra_Rule_10_Lint=Info 765: external 'function' could be made static [MISRA 2004 Rule 8.10]
Doc_Misra_Rule_10_Reason=Device Initialization - ISR declaration is subject of various modifications by the user and may or may not be copied to another module - static is not used.
Doc_Misra_Rule_10_Type=Required
Doc_Misra_Rule_11=10.1
Doc_Misra_Rule_11_Description=The value of an expression of integer type shall not be implicitly converted to a different underlying type.
Doc_Misra_Rule_11_Lint=Note 960: Violates MISRA 2004 Required Rule 10.1, Implicit conversion of integer to smaller type
Doc_Misra_Rule_11_Reason=
Doc_Misra_Rule_11_Type=Required
Doc_Misra_Rule_12=11.3
Doc_Misra_Rule_12_Description=A cast should not be performed between a pointer type and an integral type.
Doc_Misra_Rule_12_Lint=Note 923: cast from 'integer type' to pointer [Encompasses MISRA 2004 Rules 11.1 and 11.3], [MISRA 2004 Rule 11.3]
Doc_Misra_Rule_12_Reason=IO map is based on structures and typecasting from a peripheral base address (integer constant) to a pointer type is used to get a pointer to the given peripheral structure used to access a peripheral registers.
Doc_Misra_Rule_12_Type=Advisory
Doc_Misra_Rule_13=11.4
Doc_Misra_Rule_13_Description=A cast should be not be performed between a pointer to object type and different pointer to object type
Doc_Misra_Rule_13_Lint=Note 929: cast from pointer to pointer [MISRA 2004 Rule 11.4]
Doc_Misra_Rule_13_Reason=See detailed description for particular component
Doc_Misra_Rule_13_Type=Advisory
Doc_Misra_Rule_14=12.1
Doc_Misra_Rule_14_Description=Limited dependence should be placed on C's operator precedence rules in expressions.
Doc_Misra_Rule_14_Lint=Note 961: Violates MISRA 2004 Advisory Rule 12.1, dependence placed on C's operator precedence; operators: ',' and ','
Doc_Misra_Rule_14_Reason=
Doc_Misra_Rule_14_Type=Advisory
Doc_Misra_Rule_15=12.8
Doc_Misra_Rule_15_Description=The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand.
Doc_Misra_Rule_15_Lint=Warning 572: Excessive shift value (precision 2 shifted right by 8) [MISRA 2004 Rule 12.8]
Doc_Misra_Rule_15_Reason=
Doc_Misra_Rule_15_Type=Required
Doc_Misra_Rule_16=12.10
Doc_Misra_Rule_16_Description=The comma operator shall not be used.
Doc_Misra_Rule_16_Lint=Note 960: Violates MISRA 2004 Required Rule 12.10, comma operator used
Doc_Misra_Rule_16_Reason=Comma operator is used in PDD macros.
Doc_Misra_Rule_16_Type=Required
Doc_Misra_Rule_17=12.11
Doc_Misra_Rule_17_Description=Evaluation of constant unsigned integer expressions should not lead to wrap-around.
Doc_Misra_Rule_17_Lint=Warning 648: Overflow in computing constant for operation: 'unsigned shift left' [MISRA 2004 Rule 12.11]
Doc_Misra_Rule_17_Reason=
Doc_Misra_Rule_17_Type=Advisory
Doc_Misra_Rule_18=13.7
Doc_Misra_Rule_18_Description=Boolean operations whose results are invariant shall not be permitted.
Doc_Misra_Rule_18_Lint=Warning 506: Constant value Boolean [MISRA 2004 Rules 13.7 and 14.1]
Doc_Misra_Rule_18_Reason=PDD macros define constants that can be passed as parameters to these macros.
Doc_Misra_Rule_18_Type=Required
Doc_Misra_Rule_19=14.2
Doc_Misra_Rule_19_Description=All non-null statements shall either: <br/>a) have at least one side effect however executed, <br/>or b) cause control flow to change.
Doc_Misra_Rule_19_Lint=Warning 522: Highest operation, operator ',', lacks side-effects
Doc_Misra_Rule_19_Reason=Some PDD macros have two commas in the macro implementation.
Doc_Misra_Rule_19_Type=Required
Doc_Misra_Rule_1_Description=All code shall conform to ISO 9899-1990 (C-code guideline)
Doc_Misra_Rule_1_Lint=Note 950: Non-ANSI reserved word or construct [MISRA 2004 Rules 1.1 and 2.2]
Doc_Misra_Rule_1_Reason=Non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt, CONVERT_TO_PAGED (RS08 only).
Doc_Misra_Rule_1_Type=Required
Doc_Misra_Rule_2=1.4
Doc_Misra_Rule_20=14.7
Doc_Misra_Rule_20_Description=A function shall have a single point of exit at the end of the function.
Doc_Misra_Rule_20_Lint=Note 904: Return statement before end of function [MISRA 2004 Rule 14.7]
Doc_Misra_Rule_20_Reason=Use of multiple return statements simplifies the code logic.
Doc_Misra_Rule_20_Type=Required
Doc_Misra_Rule_21=18.4
Doc_Misra_Rule_21_Description=Unions shall not be used.
Doc_Misra_Rule_21_Lint=Note 960: Violates MISRA 2004 Required Rule 18.4, unions shall not be used
Doc_Misra_Rule_21_Reason=Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.
Doc_Misra_Rule_21_Type=Required
Doc_Misra_Rule_22=19.13
Doc_Misra_Rule_22_Description=The # and ## preprocessor operators should not be used.
Doc_Misra_Rule_22_Lint=Note 961: Violates MISRA 2004 Advisory Rule 19.13, '#/##' operator used
Doc_Misra_Rule_22_Reason=Preprocessor operators are used to convert bit name to bit mask in macros for accessing peripheral registers.
Doc_Misra_Rule_22_Type=Advisory
Doc_Misra_Rule_2_Description=The compiler/linker shall be checked to ensure that 31 character significance and case sensitivity are supported for external identifiers.
Doc_Misra_Rule_2_Lint=Note Warning 621: Identifier clash [MISRA 2004 Rules 1.2, 1.4 and 5.1]
Doc_Misra_Rule_2_Reason=IO map defines register access constants. The constants' names contain peripheral name, register name, bit name and suffix _MASK/_SHIFT.
Doc_Misra_Rule_2_Type=Required
Doc_Misra_Rule_3=2.1
Doc_Misra_Rule_3_Description=Assembly language shall be encapsulated and isolated.
Doc_Misra_Rule_3_Lint=Note 950: Non-ANSI reserved word or construct [MISRA 2004 Rules 1.1 and 2.2]
Doc_Misra_Rule_3_Reason=Non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt, CONVERT_TO_PAGED (RS08 only).
Doc_Misra_Rule_3_Type=Required
Doc_Misra_Rule_4=3.1
Doc_Misra_Rule_4_Description=All usage of implementation-defined behavior shall be documented.
Doc_Misra_Rule_4_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_4_Reason=Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:
Doc_Misra_Rule_4_Type=Required
Doc_Misra_Rule_5=3.2
Doc_Misra_Rule_5_Description=The character set and the corresponding encoding shall be documented.
Doc_Misra_Rule_5_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_5_Reason=Basic character set (see ISO 9899) is used in execution character set. Execution character set uses ASCII encoding (possible codes 0-255). Exception to basic character set: Term component uses NULL(0x00), CR (0x0D), LF(0x0A).
Doc_Misra_Rule_5_Type=Required
Doc_Misra_Rule_6=3.3
Doc_Misra_Rule_6_Description=The implementation of integer division in the chosen compiler should be determined, documented and taken into account.
Doc_Misra_Rule_6_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_6_Reason=The way a Compiler implements division and modulo for negative operands is determined by the hardware implementation of the target's division instructions. See documentation of CodeWarrior S12(X) Build tools for more information.
Doc_Misra_Rule_6_Type=Advisory
Doc_Misra_Rule_7=3.4
Doc_Misra_Rule_7_Description=All uses of the #pragma directives shall be documented and explained.
Doc_Misra_Rule_7_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_7_Reason=Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.
Doc_Misra_Rule_7_Type=Required
Doc_Misra_Rule_8=3.6
Doc_Misra_Rule_8_Description=All libraries used in production code shall be written to comply with the provision of this document and shall have been subject to appropriate validation.
Doc_Misra_Rule_8_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_8_Reason=Only libraries included in CodeWarrior development studio are used in the generated source code.
Doc_Misra_Rule_8_Type=Required
Doc_Misra_Rule_9=6.3
Doc_Misra_Rule_9_Description=Typedef that indicates size and signedness should be used in place of basic types.
Doc_Misra_Rule_9_Lint=Info 970: Use of modifier or type 'int' outside of a typedef [MISRA Rule 6.3]
Doc_Misra_Rule_9_Reason=The type of the function is defined by tool set. ProcessorExpert definition must comply..
Doc_Misra_Rule_9_Type=Advisory
DriverAuthor=Petr Cach
DriverDate=05.02.2010
DriverVersion=01.01
EndOfInterface=
Settings=Common\MainSettings.inc
Doc_Misra_Rule_10_Location=[Cpu|Vectors.c]
Doc_Misra_Rule_11_Location=[PE_Types.h|SDHC_LDD]
Doc_Misra_Rule_11_Location_Reason=[Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.]
Doc_Misra_Rule_12_Location=[IO_Map.h]
Doc_Misra_Rule_13_Location=[Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD]
Doc_Misra_Rule_13_Location_Reason=[Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.]
Doc_Misra_Rule_14_Location=[SDHC_LDD|Ethernet_LDD]
Doc_Misra_Rule_14_Location_Reason=[Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.]
Doc_Misra_Rule_15_Location=[Ethernet_LDD|TimerUnit_LDD|Serial_LDD]
Doc_Misra_Rule_15_Location_Reason=[Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.]
Doc_Misra_Rule_16_Location=[Global]
Doc_Misra_Rule_17_Location=[Ethernet_LDD]
Doc_Misra_Rule_17_Location_Reason=[Macro for endianness conversion cannot be used on constants.]
Doc_Misra_Rule_18_Location=[Global]
Doc_Misra_Rule_19_Location=[Global]
Doc_Misra_Rule_1_Location=[PE_Types.h|Cpu|Vectors.c|FLASH_LDD]
Doc_Misra_Rule_1_Location_Reason=[The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.]
Doc_Misra_Rule_20_Location=[Global]
Doc_Misra_Rule_21_Location=[Global|IO_Map.h]
Doc_Misra_Rule_21_Location_Reason=[Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.]
Doc_Misra_Rule_22_Location=[PE_Types.h]
Doc_Misra_Rule_22_Location_Reason=[Used to convert bit name to bit mask in macros accessing registers.]
Doc_Misra_Rule_2_Location=[IO_Map.h]
Doc_Misra_Rule_3_Location=[PE_Types.h|Cpu|Vectors.c]
Doc_Misra_Rule_3_Location_Reason=[The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.]
Doc_Misra_Rule_4_Location=[PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info]
Doc_Misra_Rule_4_Location_Reason=[Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.]
Doc_Misra_Rule_5_Location=[PE_Info]
Doc_Misra_Rule_6_Location=[PE_Info]
Doc_Misra_Rule_7_Location=[PE_Info]
Doc_Misra_Rule_7_Location_Reason=[Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.]
Doc_Misra_Rule_8_Location=[CAU_LDD]
Doc_Misra_Rule_8_Location_Reason=[CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.]
Doc_Misra_Rule_9_Location=[CPU|Main.c]
PE_MisraErrorCodes=[970]
revAuth=[PC]
revCmnt_0=[Return type of the main function changed to int.]
revDate=[11.05.2012]
revLvl=[5]
revVer=[01.01]
revVrf=[RH]

 LOCAL SYMBOLS (alphabet order)
-------------------------------
C_AlraedyInitialized=no
C_CompilerIdentificationLong=GNU C Compiler
C_GenerateLINKFILE=yes
C_HeapSize=0
C_RomRamAddr0=0
C_RomRamAddr0_Area=
C_RomRamAddr0_EEPROM=no
C_RomRamAddr0_External=no
C_RomRamAddr0_FLASH=yes
C_RomRamAddr0_Internal=yes
C_RomRamAddr0_RAM=no
C_RomRamAddr0_ROM=no
C_RomRamAddr2=1040
C_RomRamAddr2_Area=
C_RomRamAddr2_EEPROM=no
C_RomRamAddr2_External=no
C_RomRamAddr2_FLASH=yes
C_RomRamAddr2_Internal=yes
C_RomRamAddr2_RAM=no
C_RomRamAddr2_ROM=no
C_RomRamAddr3=536805376
C_RomRamAddr3_Area=
C_RomRamAddr3_EEPROM=no
C_RomRamAddr3_External=no
C_RomRamAddr3_FLASH=no
C_RomRamAddr3_Internal=yes
C_RomRamAddr3_RAM=yes
C_RomRamAddr3_ROM=no
C_RomRamAddr4=536870912
C_RomRamAddr4_Area=
C_RomRamAddr4_EEPROM=no
C_RomRamAddr4_External=no
C_RomRamAddr4_FLASH=no
C_RomRamAddr4_Internal=yes
C_RomRamAddr4_RAM=yes
C_RomRamAddr4_ROM=no
C_RomRamArea0=
C_RomRamArea2=
C_RomRamArea3=
C_RomRamArea4=
C_RomRamGroupContent0Lines=0
C_RomRamGroupContent2Lines=0
C_RomRamGroupContent3Lines=0
C_RomRamGroupContent4Lines=0
C_RomRamListMaxItem=4
C_RomRamListNumItems=5
C_RomRamName0=m_interrupts
C_RomRamName2=m_text
C_RomRamName3=m_data
C_RomRamName4=m_data_20000000
C_RomRamPhysicalType0=FLASH
C_RomRamPhysicalType2=FLASH
C_RomRamPhysicalType3=RAM
C_RomRamPhysicalType4=RAM
C_RomRamQualifier0=RX
C_RomRamQualifier2=RX
C_RomRamQualifier3=RW
C_RomRamQualifier4=RW
C_RomRamSize0=480
C_RomRamSize2=523248
C_RomRamSize3=65536
C_RomRamSize4=65536
C_StackSize=1024
Cmplr_AddStartup=yes
Cmplr_AddStartupCond=
Cmplr_GenerateDebuggerFiles=no
DefaultMemAreas=Click to set default >
DefaultMemCode=INTERNAL_FLASH
DefaultMemData=INTERNAL_RAM
DefaultMemInterrupts=INTERNAL_FLASH
EntryPoint_UserCodeAfterLines=0
EntryPoint_UserCodeBeforeLines=0
EntryPoint_UserDeclLines=0
GNUC_ARM_Directory=
InitializationState=User_PE_initialization
InterruptVectorTableSizeAdjustment=0
ModuleName=main
NotRapidGrp=
NotSDK=
NotSdk0=
UnhandledIntCodeLines=2
UnhandledVectorsBehavior=SharedISR
UnhandledVectorsBehaviorFeatureGrp=
UserInitFeatureGrp=
WatchDogResetMethod=WriteA602B480
WatchDogServiceRegister=WDOG_REFRESH
BeanUserCopyright=[|]
C_RomRamGroupContent0=[]
C_RomRamGroupContent0Len=[]
C_RomRamGroupContent2=[]
C_RomRamGroupContent2Len=[]
C_RomRamGroupContent3=[]
C_RomRamGroupContent3Len=[]
C_RomRamGroupContent4=[]
C_RomRamGroupContent4Len=[]
EntryPoint_UserCodeAfter=[]
EntryPoint_UserCodeAfterLen=[]
EntryPoint_UserCodeBefore=[]
EntryPoint_UserCodeBeforeLen=[]
EntryPoint_UserDecl=[]
EntryPoint_UserDeclLen=[]
UnhandledIntCode=[/* This code can be changed using the CPU component property "Build Options / Unhandled int code" */|PE_DEBUGHALT();]
UnhandledIntCodeLen=[100|15]

GLOBAL SYMBOLS (alphabet order)
-------------------------------
ADC0AsynchroClockAddr=1073983496
ADC0AsynchroClockReg=ADC0_CFG1
ADC0BusClockAddr=1073983496
ADC0BusClockReg=ADC0_CFG1
ADC0ClkSelAddr=1073983496
ADC0ClkSelReg=ADC0_CFG1
ADC1AsynchroClockAddr=1074507784
ADC1AsynchroClockReg=ADC1_CFG1
ADC1BusClockAddr=1074507784
ADC1BusClockReg=ADC1_CFG1
ADC1ClkSelAddr=1074507784
ADC1ClkSelReg=ADC1_CFG1
ActiveConfigIdentifier=PEcfg_FLASH
ActiveConfiguration=FLASH
CPUDB_CPU_MASTER=MK60DZ10
CPUDB_CW_MCU_ID=28695
CPUDB_CW_MCU_NAME=MK60DN512Zxxx10
CPUDB_DataFlashBlockCount=0
CPUDB_DataFlashEraseUnitSize=0
CPUDB_DataFlashSize=0
CPUDB_DataFlashStartAddress=268435456
CPUDB_DataFlashWriteUnitSize=0
CPUDB_FTFx=-1
CPUDB_FlashType=FTFx
CPUDB_FlexRamSize=0
CPUDB_FlexRamStartAddress=335544320
CPUDB_InitComponentSplitLegacy=-1
CPUDB_LQFP144=-1
CPUDB_MK60DN512Zxxx10=-1
CPUDB_MK60DZ10=-1
CPUDB_NpiNameId=P2
CPUDB_P2=-1
CPUDB_PACKAGE=LQFP144
CPUDB_ProgramFlashBlockCount=2
CPUDB_ProgramFlashEraseUnitSize=2048
CPUDB_ProgramFlashSize=524288
CPUDB_ProgramFlashWriteUnitSize=4
CPUDB_SRAML_64KB=65536
CPUDB_SRAMU_64KB=65536
CPU_DB_version=3.00.001
CPUendian=little
CPUfamily=Kinetis
CPUproducer=Freescale
CPUrunSpeedModeNum=1
CPUsubFamily=MK60
CPUtype=MK60N512LQ100
CPUvariant=MK60DN512ZVLQ10
ClientDir_Binary=\home\kim\workspace.kds\USBSTACK\Sources\
ClientDir_Code=\home\kim\workspace.kds\USBSTACK\Generated_Code\
ClientDir_PE=\opt\Freescale\KDS_v3\eclipse\ProcessorExpert\
ClientDir_Project=\home\kim\workspace.kds\USBSTACK\
CommentBrackets=/**/
Compiler=GNUC
CompilerID=GNU C Compiler
DirRel_Binary=Sources\
DirRel_BinaryToEvents=
DirRel_Code=Generated_Code\
DirRel_Docs=Documentation\
DirRel_EventToBinary=
DirRel_Events=Sources\
DirRel_ProjectSettings=Project_Settings\
DirRel_StaticCode=Static_Code\
EclipseProjectName=USBSTACK
InterruptTableType=ROM
Language=ANSIC
Not_for_MPC512x=
Not_for_MPC5500_MCF=
O_PIB_full_Init=no
OnChipEEPROM=0
OnChipFLASH=524288
OnChipRAM=131072
PE_CFG_PEX_DRV=5_3
PE_DEVELOPMENT=
PE_ECLIPSE=
PE_GENERATING=
PE_G_CPUCFG_AutoIncludeIO_Map=yes
PE_G_CPUCFG_EntryPointFunctionName=__init_hardware
PE_G_CPUCFG_EntryPointFunctionReturn=
PE_G_CPUCFG_EntryPointFunctionReturnType=void
PE_G_CPUCFG_GenerateLinkerFile=yes
PE_G_CPUCFG_GenerateMainModule=yes
PE_G_CPUCFG_InitIntVectorTableSym=yes
PE_G_CPUCFG_ManageInterruptVectorTable=yes
PE_G_CPUpinVariantMaster=MK60DZ10
PE_G_Doxygen_Support=
PE_G_EBGN_FTFL_FlashConfigFTFL_FlashConfigSecurityTS2=10
PE_G_GenBitMask=
PE_G_MisraCnfBackParams_0=
PE_G_MisraCnfParams_0=
PE_G_MisraRuleList_0=
PE_G_MisraStackIdx=-1
PE_G_NO_SETREGMACROS=
PE_G_PE_IOMap=
PE_G_USE_UINTXX_T=
PE_G_XLKR_C_COMPILER_LANGUAGE_STANDARD=ilg.gnuarmeclipse.managedbuild.cross.option.c.compiler.std.c99
PE_G_XLKR_ToolChain_Linker_OtherC=
PE_G_XLKR_ToolChain_Linker_OtherCpp=-specs=nano.specs -specs=nosys.specs
PE_ProductVersion=10.5
PEversion=05.21
PEversionDecimal=1313
ProcessorModule=Cpu
ProcessorName=Cpu
ProjectMainModule=main
ProjectName=USBSTACK
ProjectStaticFilesGenerationMode=STANDALONE
ServerDir_PE=\opt\Freescale\KDS_v3\eclipse\ProcessorExpert\
SetHighSpeedMode=
SupportedCPUfamily=
TimeStamp=2016-09-07, 23:22, # CodeGen: 0
Xtal_kHz=4000
Xtal_kHz_real=4000
virtual_ADC0_TotalConversionPrescalerAddr=1073983496
virtual_ADC0_TotalConversionPrescalerReg=ADC0_CFG1
virtual_ADC1_TotalConversionPrescalerAddr=1074507784
virtual_ADC1_TotalConversionPrescalerReg=ADC1_CFG1

 DEPRECATED GLOBAL SYMBOLS (alphabet order)
-------------------------------------------
CPU=MK60DN512ZVLQ10
CPU_Expert=05.21
DirRel_DriverToEvents=
DirRel_Drivers=Generated_Code\
DirRel_EventToDrivers=..\Generated_Code\
DirRel_GeneratedCode=Generated_Code
DirRel_Sources=Sources
Dir_Binary=\home\kim\workspace.kds\USBSTACK\Sources\
Dir_Drivers=\home\kim\workspace.kds\USBSTACK\Generated_Code\
Dir_Events=\home\kim\workspace.kds\USBSTACK\Sources\
Dir_PE=\opt\Freescale\KDS_v3\eclipse\ProcessorExpert\
Dir_Project=\home\kim\workspace.kds\USBSTACK\
ProjectModule=main

 GLOBAL LISTS (alphabet order)
-------------------------------------------
ADC0AsynchroClock=[1]
ADC0AsynchroClock_Setting=[ADC0Async_FullPower_HighSpeed]
ADC0BusClock=[1]
ADC0BusClock_Setting=[1]
ADC0ClkSel=[1]
ADC0ClkSel_Setting=[ADC0BusClock]
ADC1AsynchroClock=[1]
ADC1AsynchroClock_Setting=[ADC1Async_FullPower_HighSpeed]
ADC1BusClock=[1]
ADC1BusClock_Setting=[1]
ADC1ClkSel=[1]
ADC1ClkSel_Setting=[ADC1BusClock]
CAN0ClkSel=[1]
CAN0ClkSel_Setting=[CAN0BusClk]
CAN1ClkSel=[1]
CAN1ClkSel_Setting=[CAN1BusClk]
CMTPresc=[1]
CMTPresc_Setting=[1]
CMTPrimaryPresc=[1]
CMTPrimaryPresc_Setting=[1]
ERCLK32KSel=[1]
ERCLK32KSel_Setting=[SYSTEM_OSC]
EWMClkSel=[1]
EWMClkSel_Setting=[LPO_1kHzSrc]
EventModuleList=[Events]
FTM0ClkSource=[1]
FTM0ClkSource_Setting=[OUTDIV2Presc]
FTM1ClkSource=[1]
FTM1ClkSource_Setting=[OUTDIV2Presc]
FTM2ClkSource=[1]
FTM2ClkSource_Setting=[OUTDIV2Presc]
I2C0_LoTimeoutClkSel=[1]
I2C0_LoTimeoutClkSel_Setting=[I2C0_LoTimeout_BusClkDiv64]
I2C1_LoTimeoutClkSel=[1]
I2C1_LoTimeoutClkSel_Setting=[I2C1_LoTimeout_BusClkDiv64]
I2S0_ClkSel=[1]
I2S0_ClkSel_Setting=[I2S0_CoreDiv]
I2S0_Rx_Div2_PSR=[1]
I2S0_Rx_Div2_PSR_Setting=[1]
I2S0_Tx_Div2_PSR=[1]
I2S0_Tx_Div2_PSR_Setting=[1]
IRCLKSel=[1]
IRCLKSel_Setting=[IRC_32kHz]
IncludeSharedModules=[PE_Types|PE_Error|PE_Const|IO_Map]
InstructionClock=[undef]
LPTMR0_ClockSelect=[1]
LPTMR0_ClockSelect_Setting=[ERCLK]
MCGOUTSel=[1]
MCGOUTSel_Setting=[MCGPLLCLK]
MCG_ERCLKSel=[1]
MCG_ERCLKSel_Setting=[SYSTEM_OSC]
MCG_FLL_MFactor=[640]
MCG_FLL_MFactor_Setting=[640]
MCG_FLL_RCLKSel=[1]
MCG_FLL_RCLKSel_Setting=[MCG_FRDIV]
MCG_FRDIV=[1024]
MCG_FRDIV_Setting=[1024]
MCG_PRDIV=[25]
MCG_PRDIV_Setting=[25]
MCG_VDIV=[48]
MCG_VDIV_Setting=[48]
ModuleList=[LED1|LEDpin1|BitIoLdd1|LED2|LEDpin2|BitIoLdd2|LED3|LEDpin3|BitIoLdd3|LED4|LEDpin4|BitIoLdd4|CS1|USB1|USB0|CDC1|Tx1|Rx1|CS2]
OUTDIV1Presc=[2]
OUTDIV1Presc_Setting=[2]
OUTDIV2Presc=[2]
OUTDIV2Presc_Setting=[2]
OUTDIV3Presc=[2]
OUTDIV3Presc_Setting=[2]
OUTDIV4Presc=[4]
OUTDIV4Presc_Setting=[4]
PExProducts=[]
PLLFLLSel=[1]
PLLFLLSel_Setting=[MCGPLLCLK]
RTC_ClkSel=[1]
RTC_ClkSel_Setting=[RTC_OSC]
SDHC_ClkSel=[1]
SDHC_ClkSel_Setting=[OUTDIV1Presc]
SharedModules=[Kinetis\PE_Types.drv|Kinetis\PE_Error.drv|Kinetis\PE_Const.drv|Kinetis\IO_Map.drv]
SpeedModeList=[SpeedMode0]
SpeedModeNames=[SpeedMode0|SpeedMode1|SpeedMode2|SpeedMode3|SpeedMode4|SpeedMode5|SpeedMode6|SpeedMode7]
SystemPrescaler=[1]
SystemPrescaler_Setting=[1]
USB0_ClkSel=[1]
USB0_ClkSel_Setting=[USB0_PLLFLL0Div]
USB0_PLLFLL0Div=[1]
USB0_PLLFLL0Div_Setting=[1]
USB0_PLLFLL0Frac=[1]
USB0_PLLFLL0Frac_Setting=[1]
WDOGAddPresc=[1]
WDOGAddPresc_Setting=[1]
WDOGClkSel=[1]
WDOGClkSel_Setting=[OUTDIV2Presc]
virtual_ADC0_TotalConversionPrescaler=[1]
virtual_ADC0_TotalConversionPrescaler_Setting=[1]
virtual_ADC1_TotalConversionPrescaler=[1]
virtual_ADC1_TotalConversionPrescaler_Setting=[1]

{{DEVELOPMENT}} --------(((DEBUGINFO)))--------.{{DEVELOPMENT}} 

